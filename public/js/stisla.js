/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/stisla.js":
/*!********************************!*\
  !*** ./resources/js/stisla.js ***!
  \********************************/
/***/ (function() {

eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n(function ($, window, i) {\n  // Bootstrap 4 Modal\n  $.fn.fireModal = function (options) {\n    var options = $.extend({\n      size: 'modal-md',\n      center: false,\n      animation: true,\n      title: 'Modal Title',\n      closeButton: true,\n      header: true,\n      bodyClass: '',\n      footerClass: '',\n      body: '',\n      buttons: [],\n      autoFocus: true,\n      removeOnDismiss: false,\n      created: function created() {},\n      appended: function appended() {},\n      onFormSubmit: function onFormSubmit() {},\n      modal: {}\n    }, options);\n    this.each(function () {\n      i++;\n      var id = 'fire-modal-' + i,\n        trigger_class = 'trigger--' + id,\n        trigger_button = $('.' + trigger_class);\n      $(this).addClass(trigger_class);\n\n      // Get modal body\n      var body = options.body;\n      if (_typeof(body) == 'object') {\n        if (body.length) {\n          var part = body;\n          body = body.removeAttr('id').clone().removeClass('modal-part');\n          part.remove();\n        } else {\n          body = '<div class=\"text-danger\">Modal part element not found!</div>';\n        }\n      }\n\n      // Modal base template\n      var modal_template = '   <div class=\"modal' + (options.animation == true ? ' fade' : '') + '\" tabindex=\"-1\" role=\"dialog\" id=\"' + id + '\">  ' + '     <div class=\"modal-dialog ' + options.size + (options.center ? ' modal-dialog-centered' : '') + '\" role=\"document\">  ' + '       <div class=\"modal-content\">  ' + (options.header == true ? '         <div class=\"modal-header\">  ' + '           <h5 class=\"modal-title\">' + options.title + '</h5>  ' + (options.closeButton == true ? '           <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">  ' + '             <span aria-hidden=\"true\">&times;</span>  ' + '           </button>  ' : '') + '         </div>  ' : '') + '         <div class=\"modal-body\">  ' + '         </div>  ' + (options.buttons.length > 0 ? '         <div class=\"modal-footer\">  ' + '         </div>  ' : '') + '       </div>  ' + '     </div>  ' + '  </div>  ';\n\n      // Convert modal to object\n      var modal_template = $(modal_template);\n\n      // Start creating buttons from 'buttons' option\n      var this_button;\n      options.buttons.forEach(function (item) {\n        // get option 'id'\n        var id = \"id\" in item ? item.id : '';\n\n        // Button template\n        this_button = '<button type=\"' + (\"submit\" in item && item.submit == true ? 'submit' : 'button') + '\" class=\"' + item[\"class\"] + '\" id=\"' + id + '\">' + item.text + '</button>';\n\n        // add click event to the button\n        // this_button = $(this_button).off('click').on(\"click\", function() {\n        //   // execute function from 'handler' option\n        //   item.handler.call(this, modal_template);\n        // });\n        // append generated buttons to the modal footer\n        $(modal_template).find('.modal-footer').append(this_button);\n      });\n\n      // append a given body to the modal\n      $(modal_template).find('.modal-body').append(body);\n\n      // add additional body class\n      if (options.bodyClass) $(modal_template).find('.modal-body').addClass(options.bodyClass);\n\n      // add footer body class\n      if (options.footerClass) $(modal_template).find('.modal-footer').addClass(options.footerClass);\n\n      // execute 'created' callback\n      options.created.call(this, modal_template, options);\n\n      // modal form and submit form button\n      var modal_form = $(modal_template).find('.modal-body form'),\n        form_submit_btn = modal_template.find('button[type=submit]');\n\n      // append generated modal to the body\n      $(\"body\").append(modal_template);\n\n      // execute 'appended' callback\n      options.appended.call(this, $('#' + id), modal_form, options);\n\n      // if modal contains form elements\n      if (modal_form.length) {\n        // if `autoFocus` option is true\n        if (options.autoFocus) {\n          // when modal is shown\n          $(modal_template).on('shown.bs.modal', function () {\n            // if type of `autoFocus` option is `boolean`\n            if (typeof options.autoFocus == 'boolean') modal_form.find('input:eq(0)').focus(); // the first input element will be focused\n            // if type of `autoFocus` option is `string` and `autoFocus` option is an HTML element\n            else if (typeof options.autoFocus == 'string' && modal_form.find(options.autoFocus).length) modal_form.find(options.autoFocus).focus(); // find elements and focus on that\n          });\n        }\n\n        // form object\n        var form_object = {\n          startProgress: function startProgress() {\n            modal_template.addClass('modal-progress');\n          },\n          stopProgress: function stopProgress() {\n            modal_template.removeClass('modal-progress');\n          }\n        };\n\n        // if form is not contains button element\n        if (!modal_form.find('button').length) $(modal_form).append('<button class=\"d-none\" id=\"' + id + '-submit\"></button>');\n\n        // add click event\n        form_submit_btn.click(function () {\n          modal_form.submit();\n        });\n\n        // add submit event\n        modal_form.submit(function (e) {\n          // start form progress\n          form_object.startProgress();\n\n          // execute `onFormSubmit` callback\n          options.onFormSubmit.call(this, modal_template, e, form_object);\n        });\n      }\n      $(document).on(\"click\", '.' + trigger_class, function () {\n        var modal = $('#' + id).modal(options.modal);\n        if (options.removeOnDismiss) {\n          modal.on('hidden.bs.modal', function () {\n            modal.remove();\n          });\n        }\n        return false;\n      });\n    });\n  };\n\n  // Bootstrap Modal Destroyer\n  $.destroyModal = function (modal) {\n    modal.modal('hide');\n    modal.on('hidden.bs.modal', function () {});\n  };\n\n  // Card Progress Controller\n  $.cardProgress = function (card, options) {\n    var options = $.extend({\n      dismiss: false,\n      dismissText: 'Cancel',\n      spinner: true,\n      onDismiss: function onDismiss() {}\n    }, options);\n    var me = $(card);\n    me.addClass('card-progress');\n    if (options.spinner == false) {\n      me.addClass('remove-spinner');\n    }\n    if (options.dismiss == true) {\n      var btn_dismiss = '<a class=\"btn btn-danger card-progress-dismiss\">' + options.dismissText + '</a>';\n      btn_dismiss = $(btn_dismiss).off('click').on('click', function () {\n        me.removeClass('card-progress');\n        me.find('.card-progress-dismiss').remove();\n        options.onDismiss.call(this, me);\n      });\n      me.append(btn_dismiss);\n    }\n    return {\n      dismiss: function dismiss(dismissed) {\n        $.cardProgressDismiss(me, dismissed);\n      }\n    };\n  };\n  $.cardProgressDismiss = function (card, dismissed) {\n    var me = $(card);\n    me.removeClass('card-progress');\n    me.find('.card-progress-dismiss').remove();\n    if (dismissed) dismissed.call(this, me);\n  };\n  $.chatCtrl = function (element, chat) {\n    var chat = $.extend({\n      position: 'chat-right',\n      text: '',\n      time: moment(new Date().toISOString()).format('hh:mm'),\n      picture: '',\n      type: 'text',\n      // or typing\n      timeout: 0,\n      onShow: function onShow() {}\n    }, chat);\n    var target = $(element),\n      element = '<div class=\"chat-item ' + chat.position + '\" style=\"display:none\">' + '<img src=\"' + chat.picture + '\">' + '<div class=\"chat-details\">' + '<div class=\"chat-text\">' + chat.text + '</div>' + '<div class=\"chat-time\">' + chat.time + '</div>' + '</div>' + '</div>',\n      typing_element = '<div class=\"chat-item chat-left chat-typing\" style=\"display:none\">' + '<img src=\"' + chat.picture + '\">' + '<div class=\"chat-details\">' + '<div class=\"chat-text\"></div>' + '</div>' + '</div>';\n    var append_element = element;\n    if (chat.type == 'typing') {\n      append_element = typing_element;\n    }\n    if (chat.timeout > 0) {\n      setTimeout(function () {\n        target.find('.chat-content').append($(append_element).fadeIn());\n      }, chat.timeout);\n    } else {\n      target.find('.chat-content').append($(append_element).fadeIn());\n    }\n    var target_height = 0;\n    target.find('.chat-content .chat-item').each(function () {\n      target_height += $(this).outerHeight();\n    });\n    setTimeout(function () {\n      target.find('.chat-content').scrollTop(target_height, -1);\n    }, 100);\n    chat.onShow.call(this, append_element);\n  };\n})(jQuery, this, 0);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/stisla.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/stisla.js"]();
/******/ 	
/******/ })()
;